1. 简介：
    在Web世界里，只有JavaScript能跨平台、跨浏览器驱动网页，与用户交互。
    JavaScript语言的标准，被称为ECMAScript标准。（European Computer Manufacturers Association）。
    最新版ECMAScript 6标准（简称ES6）已经在2015年6月正式发布了，所以，讲到JavaScript的版本，实际上就是说它实现了ECMAScript标准的哪个版本。

2.快速入门：
    JavaScript代码可以直接嵌在网页的任何地方，不过通常我们都把JavaScript代码放到<head>中：由<script>...</script>包含的代码就是JavaScript代码，它将直接被浏览器执行。
    第二种方法是把JavaScript代码放到一个单独的.js文件，然后在HTML中通过<script src="..."></script>引入这个文件。
     把JavaScript代码放入一个单独的.js文件中更利于维护代码，并且多个页面可以各自引用同一份.js文件。
    在编写JavaScript代码时，经常需要在Console运行测试代码。在Console中输入console.log(a);，回车后显示的值就是变量的内容。如果你对自己还有更高的要求，可以研究开发者工具的“源码(Sources)”，掌握断点、单步执行等高级调试技巧。
  
   2.1 基本语法
    JavaScript的语法和Java语言类似，每个语句以;结束，语句块用{...}   但是，JavaScript并不强制要求在每个语句的结尾加;，浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上;。让JavaScript引擎自动加分号在某些情况下会改变程序的语义，导致运行结果与期望不一致
    JavaScript严格区分大小写，如果弄错了大小写，程序将报错或者运行不正常。

   2.2 数据类型和变量
    Number：
         JavaScript不区分整数和浮点数，统一用Number表示，以下都是合法的Number类型
	123; // 整数123
	0.456; // 浮点数0.456
	1.2345e3; // 科学计数法表示1.2345x1000，等同于1234.5
	-99; // 负数
	NaN; // NaN表示Not a Number，当无法计算结果时用NaN表示
	Infinity; // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity
        计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2
    字符串：
        字符串是以单引号'或双引号"括起来的任意文本，比如'abc'，"xyz"等等。
    布尔值：
        布尔值和布尔代数的表示完全一致，一个布尔值只有true、false两种值，要么是true，要么是false，可以直接用true、false表示布尔值，也可以通过布尔运算计算出来
        &&与运算，||或运算，！非运算。
    比较运算：
        JavaScript允许对任意数据类型做比较。== 和====由于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较。
        第一种是==比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果。
        第二种是===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。
        另一个例外是NaN这个特殊的Number与所有其他值都不相等，包括它自己。 NaN===NaN  //false  唯一能判断NaN的方法是通过isNaN()函数  isNan(NaN)  //true
        最后要注意浮点数的相等比较：1 / 3 === (1 - 2 / 3); // false
        这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：Math.abs(1 / 3 - (1 - 2 / 3)) < 0.0000001; // true
    null和undefined：
        null表示一个“空”的值，它和0以及空字符串''不同，0是一个数值，''表示长度为0的字符串，而null表示“空”。
        JavaScript的设计者希望用null表示一个空的值，而undefined表示值未定义。事实证明，这并没有什么卵用，区分两者的意义不大。大多数情况下，我们都应该用null。undefined仅仅在判断函数参数是否传递的情况下有用。
    数组：
        JavaScript的数组可以包括任意数据类型。例如：[1, 2, 3.14, 'Hello', null, true];
        创建数组的方法是通过Array()函数实现：new Array(1, 2, 3); // 创建了数组[1, 2, 3]。然而，出于代码的可读性考虑，强烈建议直接使用[]。
        var arr = [1, 2, 3.14, 'Hello', null, true];
        arr[0]; // 返回索引为0的元素，即1
        arr[5]; // 返回索引为5的元素，即true
        arr[6]; // 索引超出了范围，返回undefined
    对象：
        JavaScript的对象是一组由键-值组成的无序集合，例如：
        var person = {
            name: 'Bob',
            age: 20,
            tags: ['js', 'web', 'mobile'],
            city: 'Beijing',
            hasCar: true,
            zipcode: null
        };
        JavaScript对象的键都是字符串类型，值可以是任意数据类型。要获取一个对象的属性，我们用对象变量.属性名的方式：
        person.name; // 'Bob'
        person.zipcode; // null
    变量：
        变量名是大小写英文、数字、$和_的组合，且不能用数字开头。变量名也不能是JavaScript的关键字，如if、while等。申明一个变量用var语句： var a; // 申明了变量a，此时a的值为undefined
        变量名也可以用中文，但是，请不要给自己找麻烦。
        可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，但是要注意只能用var申明一次，例如：
        var a = 123; // a的值是整数123
        a = 'ABC'; // a变为字符串
        这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。和静态语言相比，动态语言更灵活。例如Java是静态语言
        要显示变量的内容，可以用console.log(x)，使用console.log()代替alert()的好处是可以避免弹出烦人的对话框。
    strict模式：
        启用strict模式的方法是在JavaScript代码的第一行写上：'use strict';
        JavaScript在设计之初，为了方便初学者学习，并不强制要求用var申明变量。这个设计错误带来了严重的后果：如果一个变量没有通过var申明就被使用，那么该变量就自动被申明为全局变量：i = 10; // i现在是全局变量
        在同一个页面的不同的JavaScript文件中，如果都不用var申明，恰好都使用了变量i，将造成变量i互相影响，产生难以调试的错误结果。
        使用var申明的变量则不是全局变量，它的范围被限制在该变量被申明的函数体内，同名变量在不同的函数体内互不冲突。
        为了修补JavaScript这一严重设计缺陷，ECMA在后续规范中推出了strict模式，在strict模式下运行的JavaScript代码，强制通过var申明变量，未使用var申明变量就使用的，将导致运行错误。
        'use strict'; 不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript。
        不用var申明的变量会被视为全局变量，为了避免这一缺陷，所有的JavaScript代码都应该使用strict模式。

   2.3 字符串
        JavaScript的字符串就是用''或""括起来的字符表示。
        如果'本身也是一个字符，那就可以用""括起来，比如"I'm OK"包含的字符是I，'，m，空格，O，K这6个字符。
        如果字符串内部既包含'又包含"，可以用转义字符\来标识，比如：'I\'m \"OK\"!'; 表示的字符串内容是：I'm "OK"!
        转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\\表示的字符就是\。
        ASCII字符可以以\x##形式的十六进制表示，例如：'\x41'; // 完全等同于 'A' 。 还可以用\u####表示一个Unicode字符：'\u4e2d\u6587'; // 完全等同于 '中文'
    多行字符串：
        由于多行字符串用\n写起来比较费事，所以最新的ES6标准新增了一种多行字符串的表示方法，用反引号 * ... * 表示：
        console.log(`这是一个
        多行
        字符串`);
    模板字符串：
        要把多个字符串连接起来，可以用+号连接：
        var name = '小明';
        var age = 20;
        var message = '你好, ' + name + ', 你今年' + age + '岁了!';
        如果有很多变量需要连接，用+号就比较麻烦。ES6新增了一种模板字符串，表示方法和上面的多行字符串一样，但是它会自动替换字符串中的变量：
        var message = `你好, ${name}, 你今年${age}岁了!`;  (注意模板字符串的声明也是用 反引号 括起来的)
    操作字符串：
        字符串常见的操作如下：
        var s = 'Hello, world!';
        s.length; // 13
        要获取字符串某个指定位置的字符，使用类似Array的下标操作，索引号从0开始：
        s[0]; // 'H'
        s[13]; // undefined 超出范围的索引不会报错，但一律返回undefined
        需要特别注意的是，字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果：
        var s = 'Test';
        s[0] = 'X';
        alert(s); // s仍然为'Test'
        JavaScript为字符串提供了一些常用方法，注意，调用这些方法本身不会改变原有字符串的内容，***而是返回一个新字符串：***
        toUpperCase()把一个字符串全部变为大写：
        var s = 'Hello';
        s.toUpperCase(); // 返回'HELLO'
        toLowerCase()把一个字符串全部变为小写：
        var s = 'Hello';
        var lower = s.toLowerCase(); // 返回'hello'并赋值给变量lower
        indexOf()会搜索指定字符串出现的位置：
        var s = 'hello, world';
        s.indexOf('world'); // 返回7
        s.indexOf('World'); // 没有找到指定的子串，返回-1
        substring()返回指定索引区间的子串：
        var s = 'hello, world'
        s.substring(0, 5); // 从索引0开始到5（不包括5），返回'hello'
        s.substring(7); // 从索引7开始到结束，返回'world'

   2.4 数组
        JavaScript的Array可以包含任意数据类型，并通过索引来访问每个元素。
        要取得Array的长度，直接访问length属性：
        var arr = [1, 2, 3.14, 'Hello', null, true];
        arr.length; // 6
        请注意，直接给Array的length赋一个新的值会导致Array大小的变化：
        var arr = [1, 2, 3];
        arr.length; // 3
        arr.length = 6;
        arr; // arr变为[1, 2, 3, undefined, undefined, undefined]
        arr.length = 2;
        arr; // arr变为[1, 2]
        Array可以通过索引把对应的元素修改为新的值，因此，对Array的索引进行赋值会直接修改这个Array：
        var arr = ['A', 'B', 'C'];
        arr[1] = 99;
        arr; // arr现在变为['A', 99, 'C']
        请注意，如果通过索引赋值时，索引超过了范围，同样会引起Array大小的变化：
        var arr = [1, 2, 3];
        arr[5] = 'x';
        arr; // arr变为[1, 2, 3, undefined, undefined, 'x']
        大多数其他编程语言不允许直接改变数组的大小，越界访问索引会报错。然而，JavaScript的Array却不会有任何错误。在编写代码时，不建议直接修改Array的大小，访问索引时要确保索引不会越界。
    indexOf：
        与String类似，Array也可以通过indexOf()来搜索一个指定的元素的位置：
        var arr = [10, 20, '30', 'xyz'];
        arr.indexOf(10); // 元素10的索引为0
        arr.indexOf(20); // 元素20的索引为1
        arr.indexOf(30); // 元素30没有找到，返回-1
        arr.indexOf('30'); // 元素'30'的索引为2         注意了，数字30和字符串'30'是不同的元素。
    slice：
        slice()就是对应String的substring()版本，它截取Array的部分元素，然后 ****返回一个新的Array****：
        var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
        arr.slice(0, 3); // 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']
        arr.slice(3); // 从索引3开始到结束: ['D', 'E', 'F', 'G']
        如果不给slice()传递任何参数，它就会从头到尾截取所有元素。利用这一点，我们可以很容易地复制一个Array：
        var aCopy = arr.slice();
        aCopy; // ['A', 'B', 'C', 'D', 'E', 'F', 'G']
        aCopy === arr;  // false
    push和pop：
        push()向Array的末尾添加若干元素(返回值为数组的新的长度)，pop()则把Array的最后一个元素删除掉(返回值为删除掉的元素)：
        var arr = [1, 2];
        arr.push('A', 'B'); // 返回Array新的长度: 4
        arr; // [1, 2, 'A', 'B']
        arr.pop(); // pop()返回'B'
        arr; // [1, 2, 'A']
        arr.pop(); arr.pop(); arr.pop(); // 连续pop 3次
        arr; // []
        arr.pop(); // 空数组继续pop不会报错，而是返回undefined
        arr; // []
    unshift和shift：
        如果要往Array的头部添加若干元素，使用unshift()方法(返回值为数组的新的长度)，shift()方法则把Array的第一个元素删掉(返回值为删除掉的元素)：
        var arr = [1, 2];
        arr.unshift('A', 'B'); // 返回Array新的长度: 4
        arr; // ['A', 'B', 1, 2]
        arr.shift(); // 'A'
        arr; // ['B', 1, 2]
        arr.shift(); arr.shift(); arr.shift(); // 连续shift 3次
        arr; // []
        arr.shift(); // 空数组继续shift不会报错，而是返回undefined
        arr; // []
    sort：
        sort()可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用时，按照默认顺序排序：
        var arr = ['B', 'C', 'A'];
        arr.sort();
        arr; // ['A', 'B', 'C']
        能否按照我们自己指定的顺序排序呢？完全可以，我们将在后面的函数中讲到。
    reverse：
        reverse()把整个Array的元素给调个个，也就是反转：
        var arr = ['one', 'two', 'three'];
        arr.reverse(); 
        arr; // ['three', 'two', 'one']
    splice：
        splice()方法是修改Array的“万能方法”(返回值为删除的元素)，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：
        var arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];
        // 从索引2开始删除3个元素,然后再添加两个元素:
        arr.splice(2, 3, 'Google', 'Facebook'); // 返回删除的元素 ['Yahoo', 'AOL', 'Excite']
        arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']
        // 只删除,不添加:
        arr.splice(2, 2); // ['Google', 'Facebook']
        // 只添加,不删除:
        arr.splice(2, 0, 'Google', 'Facebook'); // 返回[],因为没有删除任何元素
        arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']
    concat：
        concat()方法把当前的Array和另一个Array连接起来，并返回一个新的Array：
        var arr = ['A', 'B', 'C'];
        var added = arr.concat([1, 2, 3]);
        added; // ['A', 'B', 'C', 1, 2, 3]
        arr; // ['A', 'B', 'C']
        请注意，concat()方法并没有修改当前Array，而是返回了一个新的Array。
        实际上，concat()方法可以接收任意个元素和Array，并且自动把Array拆开，然后全部添加到新的Array里：
        var arr = ['A', 'B', 'C'];
        arr.concat(1, 2, [3, 4]); // ['A', 'B', 'C', 1, 2, 3, 4]
    join：
        join()方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后****返回连接后的字符串：****
        var arr = ['A', 'B', 'C', 1, 2, 3];
        arr.join('-'); // 'A-B-C-1-2-3'
        如果Array的元素不是字符串，将自动转换为字符串后再连接。
    多维数组：
        如果数组的某个元素又是一个Array，则可以形成多维数组，例如：var arr = [[1, 2, 3], [400, 500, 600], '-'];
        上述Array包含3个元素，其中头两个元素本身也是Array。如何通过索引取到500这个值：arr[1][1];
        
    练习：在新生欢迎会上，你已经拿到了新同学的名单，请排序后显示：欢迎XXX，XXX，XXX和XXX同学！：
        var arr = ['小明', '小红', '大军', '阿黄'];
        console.log(`欢迎${arr.sort().slice(0,-1)}和${arr.sort().slice(-1)}同学!`);    slice返回的字符串，如果数组元素包括字符则默认加逗号???
        
   2.5 对象
        JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。
        var xiaoming = {
          name: '小明',
          birth: 1990,
          school: 'No.1 Middle School',
          weight: 65,
          score: null
        };
        JavaScript用一个{...}表示一个对象，键值对以xxx: xxx形式申明，用,隔开。注意，最后一个键值对不需要在末尾加,，如果加了，有的浏览器（如低版本的IE）将报错。
        可以通过变量xiaoming来获取小明的属性了：
        xiaoming.name; // '小明'
        xiaoming.birth; // 1990
        访问属性是通过.操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用''括起来：
        var xiaohong = {
          name: '小红',
          'middle-school': 'No.1 Middle School'
        };
        xiaohong的属性名middle-school不是一个有效的变量，就需要用''括起来。访问这个属性也无法使用.操作符，必须用['xxx']来访问：
        xiaohong['middle-school']; // 'No.1 Middle School'
        xiaohong['name']; // '小红'
        xiaohong.name; // '小红'
        我们在编写JavaScript代码的时候，属性名尽量使用标准的变量名，这样就可以直接通过object.prop的形式访问一个属性了。(写法更简洁)
        实际上JavaScript对象的所有属性都是字符串，不过属性对应的值可以是任意数据类型。访问不存在的属性不报错，而是返回undefined。
        由于JavaScript的对象是动态类型，你可以自由地给一个对象添加或删除属性：
        var xiaoming = {
          name: '小明'
        };
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        






























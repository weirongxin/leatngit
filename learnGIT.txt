1.安装配置
git config --global user.name "Wei, Rongxin"
git config --global user.email "wrx@163.com"
git config --global --list

mkdir learngit
cd learngit
pwd     //查看当前目录路径
git init  //把当前目录初始化为git管理的目录
            //git只适合管理文本文件，对于图片，word等二进制文件无法追踪具体变化。

git add readme.txt        //可以反复使用，添加多个文件
git commit -m "wrote a readme file"   //多次add 一次commit

git status  //查看当前仓库状态
git diff      //查看所有文件修改内容
git diff readme.txt   //比较当前文件
git diff HEAD -- readme.txt    //比较工作区和版本库？？
git diff --staged //比较？？

git log    //查看提交历史
git log --pretty=oneline    //查看git 提交日志。以及查看commit id

2.GIT版本管理
git reset --hard HEAD^   //回退到上一个版本。HEAD指向当前版本的指针。  HEAD^^:回退到上上个版本。HEAD~100:回退到上100个版本。
git reset --hard 1094a     //回退到指定的commit_id的版本
git reflog  //查看历史命令。比 git log 查看的更全

3.撤销修改
git checkout -- readme.txt   //撤销工作区的修改
git reset HEAD readme.txt   //撤销暂存区的修改  用HEAD表示是最新的版本

4.删除文件
①手动删除readme.txt   git add readme.txt  git commit -m "remove readme.txt "
②git rm readme.txt   git commit -m "readme.txt "

5.远程仓库
  //先有本地库，后又远程库 如何关联远程库
ssh-keygen -t rsa -C "wrx@163.com"  //生成ssh密钥。在用户主目录里.ssh文件夹下生成id_rsa(密钥)和id_rsa.pub(公钥),把公钥进行配置
git remote add origin git@github.com:weirongxin/leatngit  //在本地leatngit仓库下运行,关联到远程的空仓库。远程仓库的名字是origin
git push -u origin master  //第一次推送命令。加上-u参数，不但会把master分支的内容推送上去，还会把本地master和远程master关联起来。之后再推送不用加-u
git push origin master      //之后推送命令。 origin 远程库 master 分支
git push -f origin master  //强制推送。如果版本比现在的落后，则会覆盖之前的提交信息

  //一般开发最好先创建远程库，然后从远程库克隆
git clone https://github.com/weirongxin/leatngit.git  //use http
git clone git@github.com:weirongxin/leatngit.git       //use ssh  ssh协议速度最快
cd leatngit
ls   //列出目录下文件夹

6.分支管理
git branch   //查看所有分支，当前分支前面会加上*
git chekout -b dev   //创建dev分支并切换到dev分支
git checkout master //切换到master分支
git merge dev   //合并指定分支到当前分支。   默认使用Fast-forward模式，也就是直接该指针指向
git merge --no-ff -m "merge branch dev into master" dev   //不使用Fast-forward模式merge需要填写提交信息
git branch -d dev  //删除分支    -D参数删除没有被合并过的分支

  //切换分支git checkout <branch> 和 撤销修改git checkout --<file name> 很迷惑。 所以最新的git提供了git switch切换分支
git switch -c dev   //创建dev分支并切换到dev分支
git switch master  //切换到master分支

  //merge 的时候有冲突，解决冲突就是手动把merge的冲突部分进行修改
git log --graph --pretty=oneline --abbrev-commit  //可以查看到分支合并图

//分支管理策略
//合并分支时，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
//master分支是非常稳定的，仅用来发布新版本，平时不在上面干活。平时干活在dev分支上，只有当某个版本发布时才把dev分支merge到master上。
git merge --no-ff -m "merge branch dev into master" dev  //--no-ff参数就可以用普通模式进行合并，合并后的历史有分支能看出来曾经做过合并

//bug分支管理。如果你在当前分支上正在进行工作，分支上的信息既没有被add,也没有commit。但此时需要解决bug而且要切换到别的分支。
//git提供了stash功能，可以把当前工作现场存储起来，当以后可以在恢复出来继续工作
git stash    //工作区内容暂存
//此时再通过 git status 查看工作区，就是干净的，现在就可以创建分支来修复bug
// 大致流程:git checkout -b issue-101;   修改bug文件;  git add readme.txt; git commit -m "fix bug 101"; git switch master; git merge --no-ff -m "merged bug fix 101" issue-101
// 现在可以切换回dev分支继续干活了，git switch dev, 通过git status会发现工作区是干净的。
git stash list  //查看工作现场列表
//工作现场回复方法有2种
git stash apply stach@{0}  //恢复到指定的stash
git stash apply   git stash drop   //git stash apply恢复之后stash内容并不删除，需要用git stash drop删除。 
git stash pop  //恢复的同时把stash内容也删除。
//值得注意的是我们在master上修改了bug分支，但是在我们当前工作的dev分支上当前bug仍然存在
git cherry-pick 4c805e2  //git专门提供了一个cherry-pick命令，能复制一个特定的提交到当前分支。同时生成一个新的commit。这样就不需要在dev上手动把修复bug的过程再重复一遍

git branch -D feature  //删除没有被merge的分支

git remote      //查看远程库信息
git remote -v //显示更详细的信息
git push origin master  //推送信息
git checkout -b dev origin/dev   //创建远程的dev分支
git pull  //把当前分支的最新提交从远程抓下来
git branch --set-upstream-to=origin/dev dev  //如果git pull失败没有指定本地dev和远程dev分支的链接。通过此命令建立链接

git rebase   //可以把本地未push的分叉提交历史整理成直线。目的是使得我们再查看历史提交的变化更容易，因为分叉的提交需要三方对比

7.标签管理
  //等发布版本时，我们就会打上一个Tag。标签就是版本库的快照，其实就是指向某个commit的指针(和分支很想，但是分支可以移动，标签不能移动)。
git tag   //查看所有标签。(标签不是按照时间顺序列出的，而是按照字母排序的)
git tag v1.0   //就可以打一个标签，默认打在HEAD上。
git tag v0.9 f52c633  //给指定的commit打标签。(如果忘了打标签，现在已经周五了，但应该在周一打的标签没有打，可以用此招)
git tag -a v0.1 -m "version 0.1 released" 1094abd   //创建带有说明的标签 -a 指定标签名   -m 指定说明文字
git show v0.1  //可以看到标签的说明
  //注意：标签总是和commit挂钩，如果这个commit即出现在commit分支，也出现在dev分支。那么在俩个分支上都能看见这个标签

git push origin v0.1     //可以推送一个本地标签到远程
git push origin --tags  //可以推送全部未推送过的本地标签
git tag -d v0.1   //可以删除一个本地标签
git push origin :refs/tags/v0.1  //可以删除一个远程标签

8.关联多个远程仓库(gitee 国内的Git托管服务。速度快)
git remote -v   //先查看本地远程库的信息
git remote rm origin  //删除已经关联了origin的远程库
git remote add origin git@gitee.com:liaoxuefeng/learngit.git   //再关联Gitee的远程库
git remote -v   //再查看本地远程库的信息

  //同时关联2个远程库
git remote rm origin  //删除已经关联了origin的远程库
git remote add github git@github.com:michaelliao/learngit.git  //远程库的名字叫做github,不叫origin
git remote add gitee git@gitee.com:liaoxuefeng/learngit.git     //远程库的名字叫做gitee,不叫origin
git remote -v   //再查看本地远程库的信息






















